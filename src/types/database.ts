// src/types/database.ts

// This file can be used to manually define types for your Supabase tables
// or it can be replaced/augmented by types generated from your Supabase schema
// using `supabase gen types typescript ...`

export interface StoryStageData {
  stage_id: string;       // e.g., "character", "place" from ToddlerStage.id
  stage_title: string;    // e.g., "我們的主角" from ToddlerStage.title
  user_input: string | Record<string, any>; // Child's choice or text input
  image_url?: string;     // Optional URL if an image was generated for this specific stage
                          // For now, this might store base64 if direct upload is not implemented this step.
}

export interface Story {
  id?: string; // uuid, primary key, auto-generated by Supabase
  user_id: string; // uuid, ideally foreign key to auth.users.id
  created_at?: string; // timestamp with time zone, default now()
  title: string; // e.g., "小熊的公園大冒險"
  template_id: string; // e.g., "toddler_adventure"
  stages_data: StoryStageData[]; // Array of completed stage data
  final_image_url?: string; // Optional URL for a composite image at the end
}

// If you run `supabase gen types typescript`, it might generate a more comprehensive
// structure, potentially including a `Database` interface with a `public` schema definition.
// For example:
/*
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      stories: {
        Row: { // The data expected from Supabase when fetching a row
          id: string
          user_id: string
          created_at: string
          title: string
          template_id: string
          stages_data: Json // Supabase typically maps jsonb to Json type
          final_image_url: string | null
        }
        Insert: { // The data expected when inserting a new row
          id?: string // Usually optional as it's auto-generated
          user_id: string
          created_at?: string // Optional as it defaults to now()
          title: string
          template_id: string
          stages_data: Json
          final_image_url?: string | null
        }
        Update: { // The data expected Awhen updating a row
          id?: string
          user_id?: string
          created_at?: string
          title?: string
          template_id?: string
          stages_data?: Json
          final_image_url?: string | null
        }
        Relationships: [
          // Define relationships here if user_id is a foreign key
          // {
          //   foreignKeyName: "stories_user_id_fkey"
          //   columns: ["user_id"]
          //   referencedRelation: "users" // or your actual user table name
          //   referencedColumns: ["id"]
          // }
        ]
      }
      // ... other tables
    }
    Views: {[_ in never]: never}
    Functions: {[_ in never]: never}
    Enums: {[_ in never]: never}
    CompositeTypes: {[_ in never]: never}
  }
}
*/
// For now, the simple interfaces StoryStageData and Story will be used directly.
// The `stages_data` will be `StoryStageData[]` in TypeScript, and Supabase will handle it as `jsonb`.
// When using the Supabase client, you might need to cast `stages_data` if it comes back as a generic `Json` type.
